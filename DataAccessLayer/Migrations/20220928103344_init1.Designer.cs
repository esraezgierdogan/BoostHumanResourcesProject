// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220928103344_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f947b190-e670-4319-8539-f776e0b53090",
                            Name = "Yönetici"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "45e451d6-7bb9-424b-b877-e8f6ffbe354a",
                            Name = "Personel"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnnualLeave")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("IIF((DATEDIFF(year, [EmploymentDate], GETDATE())) > 15, 26, IIF((DATEDIFF(year, [EmploymentDate], GETDATE())) > 5, 20, 14))");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("GrossSalary")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TCNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("remainingDayOff")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1978, 9, 28, 13, 33, 43, 663, DateTimeKind.Local).AddTicks(6277),
                            ConcurrencyStamp = "ac9d07e8-eac6-4efa-876a-a3efb0883e51",
                            DepartmentID = 1,
                            Email = "jane.doe@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 665, DateTimeKind.Local).AddTicks(1558),
                            FirstName = "Jane",
                            Gender = 1,
                            GrossSalary = 10000.0,
                            ImagePath = "face10.jpg",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Doe",
                            SecurityStamp = "65C5E7CD7F053342A01A595BFCD6E8BC",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Yönetici",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1996, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4334),
                            ConcurrencyStamp = "7b0487ed-137d-4d61-8c9f-052ba400d708",
                            DepartmentID = 2,
                            Email = "ogun.erkutay@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4361),
                            FirstName = "Ogün",
                            Gender = 2,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-1.jpg",
                            LastName = "Erkutay",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Erkutay",
                            SecurityStamp = "7ED842E82E049244B3ECCDC3030EABC8",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Memur",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1995, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4572),
                            ConcurrencyStamp = "d28c3cef-fb2a-4c36-bde9-da90050caf88",
                            DepartmentID = 3,
                            Email = "esraezgi.erdogan@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4579),
                            FirstName = "Esra",
                            Gender = 1,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-2.jpg",
                            LastName = "Erdoğan",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Ezgi",
                            SecurityStamp = "BF8993B3A53E5749B4A4F5184CF2F1C9",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Aşçı",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1994, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4605),
                            ConcurrencyStamp = "c937305f-8d37-4c6c-8db7-5f8cd237b68c",
                            DepartmentID = 4,
                            Email = "sinem.pamik@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4607),
                            FirstName = "Sinem",
                            Gender = 1,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-2.jpg",
                            LastName = "Pamık",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "",
                            SecurityStamp = "C36443C1AB5C8D438563464AE23FB6B5",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Çayçı",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1993, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4623),
                            ConcurrencyStamp = "ca92ced0-04ee-48d3-82f7-bf632c477cfa",
                            DepartmentID = 5,
                            Email = "cerennur.genlikkara@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4624),
                            FirstName = "Ceren",
                            Gender = 1,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-2.jpg",
                            LastName = "Genlik Kara",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Nur",
                            SecurityStamp = "526F881DF1023D4FA1D83FB427E755A8",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Reklamcı",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1992, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4637),
                            ConcurrencyStamp = "07c47b98-2ad3-4911-bd90-eee6035fcfe5",
                            DepartmentID = 6,
                            Email = "berkayfettah.hacioglu@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4639),
                            FirstName = "Berkay",
                            Gender = 2,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-1.jpg",
                            LastName = "Hacıoğlu",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Fettah",
                            SecurityStamp = "3728E22116F5864B8C857C6A81C1893F",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Pazarlamacı",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1991, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4659),
                            ConcurrencyStamp = "770b348a-4549-464d-b515-a1dd54c86f67",
                            DepartmentID = 7,
                            Email = "mahmutmustafa.zekeriyaoglu@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4660),
                            FirstName = "Mahmut",
                            Gender = 2,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-1.jpg",
                            LastName = "Zekeriyaoğlu",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Mustafa",
                            SecurityStamp = "1E1C4EB0861F3A4FA521A3117F93D7C1",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Satışcı",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1990, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4672),
                            ConcurrencyStamp = "9a476f0e-aa97-4d61-9a98-a6397ff8c168",
                            DepartmentID = 8,
                            Email = "ismaelabraham.mcdoe@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4674),
                            FirstName = "Ismael",
                            Gender = 2,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-1.jpg",
                            LastName = "McDoe",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Abraham",
                            SecurityStamp = "031121BF604BBF4EB17C3CEA8B0D866B",
                            Status = true,
                            TCNO = "12345678912",
                            Title = "Gezici",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "Atatürk, Fatih Sultan Mehmet Cd. No:63, 34764 Ümraniye/İstanbul",
                            AnnualLeave = 0,
                            BirthDate = new DateTime(1989, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4744),
                            ConcurrencyStamp = "513e33f8-56b8-42f4-855b-db615c353b69",
                            DepartmentID = 9,
                            Email = "azazelchristian.mcdonald@sirketadi.com",
                            EmailConfirmed = false,
                            EmploymentDate = new DateTime(2017, 9, 28, 13, 33, 43, 666, DateTimeKind.Local).AddTicks(4746),
                            FirstName = "Azazel",
                            Gender = 2,
                            GrossSalary = 10000.0,
                            ImagePath = "pic-1.jpg",
                            LastName = "MCDonald",
                            LockoutEnabled = false,
                            PasswordHash = "c873586a09e16d54ef49b9ae978cd98db8edc49aaebdb4dcf460d83514321c38",
                            PhoneNumber = "5325212112",
                            PhoneNumberConfirmed = true,
                            SecondName = "Christian",
                            SecurityStamp = "9C277BE24E1CCD4EABB6F2C2708F661B",
                            Status = false,
                            TCNO = "12345678912",
                            Title = "Yiyici",
                            TwoFactorEnabled = false,
                            remainingDayOff = 0
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserAndWorkShift", b =>
                {
                    b.Property<int>("WorkShiftID")
                        .HasColumnType("int");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.HasKey("WorkShiftID", "AppUserID");

                    b.HasIndex("AppUserID");

                    b.ToTable("AppUserAndWorkShift");
                });

            modelBuilder.Entity("EntityLayer.Entities.DayOff", b =>
                {
                    b.Property<int>("DayOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<bool>("DepartmentApproval")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<bool>("ManagerApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("DayOffID");

                    b.HasIndex("AppUserID");

                    b.ToTable("DayOffs");
                });

            modelBuilder.Entity("EntityLayer.Entities.Debit", b =>
                {
                    b.Property<int>("DebitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GivenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DebitID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Debits");
                });

            modelBuilder.Entity("EntityLayer.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentName = "Yönetim"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentName = "Üretim"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentID = 4,
                            DepartmentName = "İnsan Kaynakları"
                        },
                        new
                        {
                            DepartmentID = 5,
                            DepartmentName = "Muhasebe"
                        },
                        new
                        {
                            DepartmentID = 6,
                            DepartmentName = "Pazarlama"
                        },
                        new
                        {
                            DepartmentID = 7,
                            DepartmentName = "Satın Alma"
                        },
                        new
                        {
                            DepartmentID = 8,
                            DepartmentName = "Lojistik"
                        },
                        new
                        {
                            DepartmentID = 9,
                            DepartmentName = "Güvenlik"
                        },
                        new
                        {
                            DepartmentID = 10,
                            DepartmentName = "Mühendislik"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.DepartmentAndWorkShift", b =>
                {
                    b.Property<int>("WorkShiftID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentAndWorkShiftID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("Date");

                    b.HasKey("WorkShiftID", "DepartmentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("DepartmentAndWorkShift");
                });

            modelBuilder.Entity("EntityLayer.Entities.EmploymentDetails", b =>
                {
                    b.Property<int>("EmploymentDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DismissalDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmploymentDetailsID");

                    b.HasIndex("AppUserID");

                    b.ToTable("EmploymentDetails");
                });

            modelBuilder.Entity("EntityLayer.Entities.Expense", b =>
                {
                    b.Property<int>("ExpenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DemandDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("ExpenseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ManagerApproval")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.HasKey("ExpenseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("EntityLayer.Entities.Overtime", b =>
                {
                    b.Property<int>("OvertimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DemandDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ManHour")
                        .HasColumnType("float");

                    b.Property<bool>("ManagerApproval")
                        .HasColumnType("bit");

                    b.Property<string>("OvertimeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.HasKey("OvertimeID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Overtimes");
                });

            modelBuilder.Entity("EntityLayer.Entities.WorkHour", b =>
                {
                    b.Property<int>("WorkHourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkHourID");

                    b.HasIndex("AppUserID");

                    b.ToTable("WorkHours");
                });

            modelBuilder.Entity("EntityLayer.Entities.WorkShift", b =>
                {
                    b.Property<int>("WorkShiftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BreakTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BreakTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkShiftID");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.HasOne("EntityLayer.Entities.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserAndWorkShift", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.WorkShift", "WorkShift")
                        .WithMany()
                        .HasForeignKey("WorkShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("EntityLayer.Entities.DayOff", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "AppUser")
                        .WithMany("DayOffs")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EntityLayer.Entities.Debit", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "AppUser")
                        .WithMany("Debits")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EntityLayer.Entities.DepartmentAndWorkShift", b =>
                {
                    b.HasOne("EntityLayer.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.WorkShift", "WorkShift")
                        .WithMany()
                        .HasForeignKey("WorkShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("EntityLayer.Entities.EmploymentDetails", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "AppUser")
                        .WithMany("EmploymentDetails")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EntityLayer.Entities.Expense", b =>
                {
                    b.HasOne("EntityLayer.Entities.Department", "Department")
                        .WithMany("Expenses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EntityLayer.Entities.Overtime", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "AppUser")
                        .WithMany("Overtimes")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EntityLayer.Entities.WorkHour", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "AppUser")
                        .WithMany("WorkHours")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.Navigation("DayOffs");

                    b.Navigation("Debits");

                    b.Navigation("EmploymentDetails");

                    b.Navigation("Overtimes");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("EntityLayer.Entities.Department", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
